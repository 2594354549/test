#include <wx/wx.h>
#include <wx/toolbar.h>
#include <wx/artprov.h>
#include <wx/filedlg.h>
#include <wx/msgdlg.h>
#include <wx/dcclient.h>
#include <cmath>
#include <vector>

class MyApp : public wxApp {
public:
    virtual bool OnInit() override;
};

class MyFrame : public wxFrame {
public:
    MyFrame(const wxString& title);

private:
    void OnImportCAD(wxCommandEvent& event);
    void OnSave(wxCommandEvent& event);
    void OnExportPDF(wxCommandEvent& event);
    void OnClearCanvas(wxCommandEvent& event);
    void OnDrawRectangle(wxCommandEvent& event);
    void OnDrawCircle(wxCommandEvent& event);
    void OnDrawLine(wxCommandEvent& event);
    void OnUndo(wxCommandEvent& event);
    void OnAbout(wxCommandEvent& event);
    void OnQuit(wxCommandEvent& event);

    void OnPaint(wxPaintEvent& event);
    void OnMouseDown(wxMouseEvent& event);
    void OnMouseMove(wxMouseEvent& event);
    void OnMouseUp(wxMouseEvent& event);
    void DrawShapes(wxMemoryDC& dc);
    void DrawGrid(wxMemoryDC& dc); // 新增：绘制网格
    void UpdateCanvas();

    wxDECLARE_EVENT_TABLE();

    wxBitmap m_canvas;
    wxPoint m_startPoint;
    wxPoint m_endPoint;
    bool m_drawing;
    bool m_drawCircle;
    bool m_drawLine;
    bool m_drawRectangle;

    struct Shape {
        wxPoint start;
        wxPoint end;
        bool isCircle;
        bool isRectangle;
    };

    std::vector<Shape> m_shapes;

    const int GRID_SIZE = 20; // 网格间距
};

wxBEGIN_EVENT_TABLE(MyFrame, wxFrame)
EVT_MENU(1001, MyFrame::OnImportCAD)
EVT_MENU(1002, MyFrame::OnSave)
EVT_MENU(1003, MyFrame::OnExportPDF)
EVT_MENU(1004, MyFrame::OnClearCanvas)
EVT_MENU(1005, MyFrame::OnDrawRectangle)
EVT_MENU(1006, MyFrame::OnDrawCircle)
EVT_MENU(1007, MyFrame::OnDrawLine)
EVT_MENU(1008, MyFrame::OnUndo)
EVT_MENU(wxID_ABOUT, MyFrame::OnAbout)
EVT_MENU(wxID_EXIT, MyFrame::OnQuit)
EVT_PAINT(MyFrame::OnPaint)
EVT_LEFT_DOWN(MyFrame::OnMouseDown)
EVT_LEFT_UP(MyFrame::OnMouseUp)
EVT_MOTION(MyFrame::OnMouseMove)
wxEND_EVENT_TABLE()

wxIMPLEMENT_APP(MyApp);

bool MyApp::OnInit() {
    MyFrame* frame = new MyFrame("Industrial Design Tool with Grid");
    frame->Show(true);
    return true;
}

MyFrame::MyFrame(const wxString& title)
    : wxFrame(NULL, wxID_ANY, title), m_canvas(1200, 800), m_drawing(false), m_drawCircle(false), m_drawLine(false), m_drawRectangle(false) {

    wxToolBar* toolbar = CreateToolBar();
    toolbar->AddTool(1001, "Import CAD", wxArtProvider::GetBitmap(wxART_FILE_OPEN));
    toolbar->AddTool(1002, "Save", wxArtProvider::GetBitmap(wxART_FILE_SAVE));
    toolbar->AddTool(1003, "Export to PDF", wxArtProvider::GetBitmap(wxART_FILE_SAVE_AS));
    toolbar->AddTool(1004, "Clear Canvas", wxArtProvider::GetBitmap(wxART_DELETE));
    toolbar->AddTool(1005, "Draw Rectangle", wxArtProvider::GetBitmap(wxART_TIP));
    toolbar->AddTool(1006, "Draw Circle", wxArtProvider::GetBitmap(wxART_GO_DOWN));
    toolbar->AddTool(1007, "Draw Line", wxArtProvider::GetBitmap(wxART_TIP));
    toolbar->AddTool(1008, "Undo", wxArtProvider::GetBitmap(wxART_UNDO));
    toolbar->Realize();

    wxMenu* menuFile = new wxMenu;
    menuFile->Append(1001, "Import CAD File\tCtrl-I", "Import CAD format files");
    menuFile->Append(1002, "Save\tCtrl-S", "Save the project");
    menuFile->Append(1003, "Export to PDF\tCtrl-E", "Export the project as a PDF");
    menuFile->Append(1004, "Clear Canvas\tCtrl-L", "Clear the drawing canvas");
    menuFile->Append(1005, "Draw Rectangle\tCtrl-R", "Draw a rectangle on the canvas");
    menuFile->Append(1006, "Draw Circle\tCtrl-C", "Draw a circle on the canvas");
    menuFile->Append(1007, "Draw Line\tCtrl-L", "Draw a line on the canvas");
    menuFile->Append(1008, "Undo\tCtrl-Z", "Undo the last drawing operation");
    menuFile->Append(wxID_EXIT, "Exit\tCtrl-Q", "Close the application");

    wxMenu* menuHelp = new wxMenu;
    menuHelp->Append(wxID_ABOUT, "About\tCtrl-A", "Information about this application");

    wxMenuBar* menuBar = new wxMenuBar;
    menuBar->Append(menuFile, "File");
    menuBar->Append(menuHelp, "Help");
    SetMenuBar(menuBar);
}

void MyFrame::OnImportCAD(wxCommandEvent& event) {
    wxFileDialog openFileDialog(this, "Open CAD File", "", "",
        "CAD files (*.dwg;*.dxf)|*.dwg;*.dxf",
        wxFD_OPEN | wxFD_FILE_MUST_EXIST);

    if (openFileDialog.ShowModal() == wxID_OK) {
        wxString filePath = openFileDialog.GetPath();
        wxMessageBox("Imported CAD file: " + filePath, "Info", wxOK | wxICON_INFORMATION);
    }
}

void MyFrame::OnSave(wxCommandEvent& event) {
    wxFileDialog saveFileDialog(this, "Save File", "", "",
        "Project files (*.proj)|*.proj",
        wxFD_SAVE | wxFD_OVERWRITE_PROMPT);

    if (saveFileDialog.ShowModal() == wxID_OK) {
        wxString filePath = saveFileDialog.GetPath();
        wxMessageBox("Saved project to: " + filePath, "Info", wxOK | wxICON_INFORMATION);
    }
}

void MyFrame::OnExportPDF(wxCommandEvent& event) {
    wxFileDialog saveFileDialog(this, "Export to PDF", "", "",
        "PDF files (*.pdf)|*.pdf",
        wxFD_SAVE | wxFD_OVERWRITE_PROMPT);

    if (saveFileDialog.ShowModal() == wxID_OK) {
        wxString filePath = saveFileDialog.GetPath();
        wxMessageBox("Exported to PDF: " + filePath, "Info", wxOK | wxICON_INFORMATION);
    }
}

void MyFrame::OnClearCanvas(wxCommandEvent& event) {
    m_shapes.clear();
    wxMemoryDC dc(m_canvas);
    dc.SetBackground(wxBrush(GetBackgroundColour()));
    dc.Clear();

    Refresh();
    wxMessageBox("Canvas cleared!", "Info", wxOK | wxICON_INFORMATION);
}

void MyFrame::OnDrawRectangle(wxCommandEvent& event) {
    m_drawRectangle = true;
    m_drawCircle = false;
    m_drawLine = false;
    wxMessageBox("Click and drag to draw a rectangle on the canvas.", "Draw Rectangle", wxOK | wxICON_INFORMATION);
}

void MyFrame::OnDrawCircle(wxCommandEvent& event) {
    m_drawCircle = true;
    m_drawLine = false;
    m_drawRectangle = false;
    wxMessageBox("Click and drag to draw a circle on the canvas.", "Draw Circle", wxOK | wxICON_INFORMATION);
}

void MyFrame::OnDrawLine(wxCommandEvent& event) {
    m_drawLine = true;
    m_drawCircle = false;
    m_drawRectangle = false;
    wxMessageBox("Click to set start and end points for the line.", "Draw Line", wxOK | wxICON_INFORMATION);
}

void MyFrame::OnUndo(wxCommandEvent& event) {
    if (!m_shapes.empty()) {
        m_shapes.pop_back();
        UpdateCanvas();
    }
    else {
        wxMessageBox("No shapes to undo!", "Info", wxOK | wxICON_INFORMATION);
    }
}

void MyFrame::OnPaint(wxPaintEvent& event) {
    wxPaintDC dc(this);
    dc.DrawBitmap(m_canvas, 0, 0, true);
}

void MyFrame::OnMouseDown(wxMouseEvent& event) {
    if (event.LeftIsDown()) {
        m_startPoint = event.GetPosition();
        m_drawing = true;
    }
}

void MyFrame::OnMouseMove(wxMouseEvent& event) {
    if (m_drawing) {
        m_endPoint = event.GetPosition();
        UpdateCanvas(); // Update the canvas with the current shape
    }
}

void MyFrame::OnMouseUp(wxMouseEvent& event) {
    if (m_drawing) {
        m_drawing = false;

        // 对齐到网格
        m_startPoint.x = (m_startPoint.x / GRID_SIZE) * GRID_SIZE;
        m_startPoint.y = (m_startPoint.y / GRID_SIZE) * GRID_SIZE;
        m_endPoint.x = (m_endPoint.x / GRID_SIZE) * GRID_SIZE;
        m_endPoint.y = (m_endPoint.y / GRID_SIZE) * GRID_SIZE;

        Shape shape = { m_startPoint, m_endPoint, m_drawCircle, m_drawRectangle };

        if (m_drawLine) {
            shape.isCircle = false;
            shape.isRectangle = false;
        }

        m_shapes.push_back(shape);
        UpdateCanvas(); // Finalize the drawing
    }
}

void MyFrame::UpdateCanvas() {
    wxMemoryDC dc(m_canvas);
    dc.SetBackground(wxBrush(GetBackgroundColour()));
    dc.Clear();

    // 绘制网格
    DrawGrid(dc);

    // Draw previous shapes
    DrawShapes(dc);

    // Draw current temporary shape
    if (m_drawing) {
        dc.SetBrush(wxBrush(wxColor(0, 0, 255, 128))); // semi-transparent color
        dc.SetPen(wxPen(wxColor(0, 0, 255), 2));

        if (m_drawCircle) {
            int radius = static_cast<int>(sqrt(pow(m_endPoint.x - m_startPoint.x, 2) + pow(m_endPoint.y - m_startPoint.y, 2)));
            dc.DrawCircle(m_startPoint.x, m_startPoint.y, radius);
        }
        else if (m_drawLine) {
            dc.DrawLine(m_startPoint.x, m_startPoint.y, m_endPoint.x, m_endPoint.y);
        }
        else if (m_drawRectangle) {
            dc.DrawRectangle(m_startPoint.x, m_startPoint.y,
                m_endPoint.x - m_startPoint.x,
                m_endPoint.y - m_startPoint.y);
        }
    }

    Refresh();
}

void MyFrame::DrawShapes(wxMemoryDC& dc) {
    dc.SetBrush(wxBrush(wxColor(0, 0, 255)));
    dc.SetPen(wxPen(wxColor(0, 0, 255), 2));

    for (const auto& shape : m_shapes) {
        if (shape.isCircle) {
            int radius = static_cast<int>(sqrt(pow(shape.end.x - shape.start.x, 2) + pow(shape.end.y - shape.start.y, 2)));
            dc.DrawCircle(shape.start.x, shape.start.y, radius);
        }
        else if (shape.isRectangle) {
            dc.DrawRectangle(shape.start.x, shape.start.y,
                shape.end.x - shape.start.x,
                shape.end.y - shape.start.y);
        }
        else {
            dc.DrawLine(shape.start.x, shape.start.y, shape.end.x, shape.end.y);
        }
    }
}

void MyFrame::DrawGrid(wxMemoryDC& dc) {
    dc.SetPen(wxPen(wxColor(200, 200, 200), 1)); // 浅灰色网格线

    for (int x = 0; x < m_canvas.GetWidth(); x += GRID_SIZE) {
        dc.DrawLine(x, 0, x, m_canvas.GetHeight());
    }

    for (int y = 0; y < m_canvas.GetHeight(); y += GRID_SIZE) {
        dc.DrawLine(0, y, m_canvas.GetWidth(), y);
    }
}

void MyFrame::OnAbout(wxCommandEvent& event) {
    wxMessageBox("This is an industrial design application for CAD management.", "About", wxOK | wxICON_INFORMATION);
}

void MyFrame::OnQuit(wxCommandEvent& event) {
    Close(true);
}
